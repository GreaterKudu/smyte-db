#ifndef INFRA_KAFKA_EVENTCALLBACK_H_
#define INFRA_KAFKA_EVENTCALLBACK_H_

#include "glog/logging.h"
#include "librdkafka/rdkafkacpp.h"

namespace infra {
namespace kafka {

// Default implementation for RdKafka::EventCb
class EventCallback : public RdKafka::EventCb {
 public:
  virtual ~EventCallback() {}

  // Override librdkafka callback with default implementation
  void event_cb(RdKafka::Event &event) override;

  // Process an error event generated by librdkafka.
  // Note that unlike processError, error events are not associated with any particular message.
  // Instead, they are system events such as a failure to connect to kafka brokers.
  virtual void processErrorEvent(const RdKafka::Event& event) {
    LOG(ERROR) << RdKafka::err2str(event.err());
  }

  // Process a statistics event generated by librdkafka. Do nothing by default as it is verbose.
  virtual void processStatsEvent(const RdKafka::Event& event) {}

  // Process a log event generated by librdkafka.
  virtual void processLogEvent(const RdKafka::Event& event) {
    if (event.severity() <= RdKafka::Event::EVENT_SEVERITY_ERROR) {
      LOG(ERROR) << event.str();
    } else if (event.severity() <= RdKafka::Event::EVENT_SEVERITY_WARNING) {
      LOG(WARNING) << event.str();
    } else {
      LOG(INFO) << event.str();
    }
  }

  // process a throttle level signaling event from brokers
  // Note that this event only exists for broker version >= 0.9 with quota enabled
  virtual void processThrottleEvent(const RdKafka::Event& event) {
    LOG(WARNING) << "Throttled by " << event.broker_name() << " for " << event.throttle_time() << " milliseconds";
  }
};

}  // namespace kafka
}  // namespace infra

#endif  // INFRA_KAFKA_EVENTCALLBACK_H_
